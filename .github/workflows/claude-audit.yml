name: Claude AI Code Audit

on:
  workflow_dispatch:
    inputs:
      audit_scope:
        description: "Audit scope (all, security, performance, maintainability, cleanup)"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - security
          - performance
          - maintainability
          - cleanup
      include_suggestions:
        description: "Include improvement suggestions"
        required: false
        default: true
        type: boolean

jobs:
  audit-codebase:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check and handle existing claude-code-audit branch
        id: check-branch
        run: |
          if git ls-remote --heads origin claude-code-audit | grep -q claude-code-audit; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Branch 'claude-code-audit' already exists!"
            echo "üóëÔ∏è Automatically deleting existing branch..."
            git push origin --delete claude-code-audit || echo "Branch deletion failed, but continuing..."
            echo "‚úÖ Existing branch deleted. Proceeding with audit."
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Branch 'claude-code-audit' does not exist. Proceeding with audit."
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          npm install
          pip install boto3 requests botocore PyGithub

          # Install GitHub CLI as backup for PR creation
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Analyze codebase structure
        run: |
          echo "üîç Analyzing codebase structure..."

          # Find all relevant source files
          find . -type f \( \
            -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o \
            -name "*.css" -o -name "*.scss" -o -name "*.json" -o -name "*.md" \
          \) \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" > codebase_files.txt

          echo "üìÅ Found $(wc -l < codebase_files.txt) files to analyze"

          # Create project structure context
          echo "Project structure analysis:" > project_structure.txt
          echo "=========================" >> project_structure.txt
          tree -I 'node_modules|.git|dist|build' -L 4 >> project_structure.txt 2>/dev/null || find . -type d -not -path "./node_modules*" -not -path "./.git*" >> project_structure.txt

          # Analyze dependencies
          echo "Dependencies analysis:" > dependencies_analysis.txt
          echo "=====================" >> dependencies_analysis.txt
          if [ -f "package.json" ]; then
            echo "Package.json dependencies:" >> dependencies_analysis.txt
            jq '.dependencies // {}' package.json >> dependencies_analysis.txt
            echo "" >> dependencies_analysis.txt
            echo "DevDependencies:" >> dependencies_analysis.txt
            jq '.devDependencies // {}' package.json >> dependencies_analysis.txt
          fi

      - name: Run Claude AI Code Audit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_BEDROCK_MODEL_ID: ${{ secrets.AWS_BEDROCK_MODEL_ID }}
          AUDIT_SCOPE: ${{ github.event.inputs.audit_scope }}
          INCLUDE_SUGGESTIONS: ${{ github.event.inputs.include_suggestions }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          cat << 'EOF' > claude_auditor.py
          import boto3
          import json
          import os
          import subprocess
          import time
          import random
          from datetime import datetime
          from botocore.config import Config
          from github import Github
          import re

          class ClaudeCodeAuditor:
              def __init__(self):
                  self.github_token = os.environ['GITHUB_TOKEN']
                  self.bedrock_client = self.get_bedrock_client()
                  self.model_id = os.environ.get('AWS_BEDROCK_MODEL_ID', 'us.anthropic.claude-3-5-sonnet-20241022-v2:0')
                  self.audit_scope = os.environ.get('AUDIT_SCOPE', 'all')
                  self.include_suggestions = os.environ.get('INCLUDE_SUGGESTIONS', 'true').lower() == 'true'
                  self.repo_owner = os.environ['REPO_OWNER']
                  self.repo_name = os.environ['REPO_NAME']
                  self.branch_name = "claude-code-audit"
                  
              def get_bedrock_client(self):
                  config = Config(
                      read_timeout=300,
                      connect_timeout=10,
                      retries={
                          'max_attempts': 5,
                          'mode': 'adaptive'
                      }
                  )
                  return boto3.client('bedrock-runtime', region_name=os.environ['AWS_DEFAULT_REGION'], config=config)

              def read_file_safely(self, filepath, max_lines=200):
                  """Read file content safely, limiting lines for context"""
                  try:
                      with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                          lines = f.readlines()
                          if len(lines) > max_lines:
                              return ''.join(lines[:max_lines]) + f'\n... (truncated, {len(lines)-max_lines} more lines)'
                          return ''.join(lines)
                  except Exception as e:
                      return f"Error reading file: {str(e)}"

              def analyze_codebase_structure(self):
                  """Analyze the current codebase for audit context"""
                  print("üìä Analyzing codebase structure...")
                  
                  context = {
                      'project_structure': '',
                      'key_files': {},
                      'source_files': [],
                      'dependencies': '',
                      'file_stats': {}
                  }
                  
                  # Read project structure
                  if os.path.exists('project_structure.txt'):
                      context['project_structure'] = self.read_file_safely('project_structure.txt', 100)
                  
                  # Read dependencies analysis
                  if os.path.exists('dependencies_analysis.txt'):
                      context['dependencies'] = self.read_file_safely('dependencies_analysis.txt', 50)
                  
                  # Read key configuration files
                  key_files = [
                      'package.json', 'tsconfig.json', 'vite.config.ts', 
                      'capacitor.config.ts', 'ionic.config.json', '.eslintrc.json',
                      '.eslintrc.js', 'webpack.config.js'
                  ]
                  
                  for file in key_files:
                      if os.path.exists(file):
                          context['key_files'][file] = self.read_file_safely(file, 100)
                  
                  # Read source files list
                  if os.path.exists('codebase_files.txt'):
                      with open('codebase_files.txt', 'r') as f:
                          context['source_files'] = [line.strip() for line in f.readlines() if line.strip()]
                  
                  # Calculate file statistics
                  total_files = len(context['source_files'])
                  ts_files = len([f for f in context['source_files'] if f.endswith(('.ts', '.tsx'))])
                  js_files = len([f for f in context['source_files'] if f.endswith(('.js', '.jsx'))])
                  css_files = len([f for f in context['source_files'] if f.endswith(('.css', '.scss'))])
                  
                  context['file_stats'] = {
                      'total': total_files,
                      'typescript': ts_files,
                      'javascript': js_files,
                      'css': css_files
                  }
                  
                  return context

              def sample_source_files(self, source_files, max_files=25):
                  """Sample source files for analysis"""
                  print(f"üìÇ Sampling up to {max_files} source files for detailed analysis...")
                  
                  # Prioritize important files
                  priority_patterns = [
                      r'src/.*\.tsx?$',  # React components
                      r'src/.*\.jsx?$',  # JS components
                      r'src/.*service.*\.ts$',  # Services
                      r'src/.*util.*\.ts$',  # Utilities
                      r'src/.*hook.*\.ts$',  # Hooks
                      r'src/.*context.*\.tsx?$',  # Contexts
                      r'src/.*\.css$',  # Styles
                  ]
                  
                  prioritized_files = []
                  remaining_files = []
                  
                  for file in source_files:
                      matched = False
                      for pattern in priority_patterns:
                          if re.search(pattern, file, re.IGNORECASE):
                              prioritized_files.append(file)
                              matched = True
                              break
                      if not matched:
                          remaining_files.append(file)
                  
                  # Select files to analyze
                  selected_files = prioritized_files[:max_files//2] + remaining_files[:max_files//2]
                  selected_files = selected_files[:max_files]
                  
                  file_contents = {}
                  for file_path in selected_files:
                      if os.path.exists(file_path):
                          content = self.read_file_safely(file_path, 150)
                          file_contents[file_path] = content
                          
                  print(f"‚úÖ Successfully sampled {len(file_contents)} files")
                  return file_contents

              def perform_audit_with_claude(self, codebase_context, sampled_files):
                  """Perform comprehensive code audit using Claude"""
                  
                  scope_descriptions = {
                      'all': 'Complete codebase audit covering security, maintainability, performance, and cleanup',
                      'security': 'Security-focused audit for vulnerabilities and unsafe patterns',
                      'performance': 'Performance audit for optimization opportunities',
                      'maintainability': 'Maintainability audit for code quality and structure',
                      'cleanup': 'Cleanup audit for dead code and unused dependencies'
                  }
                  
                  audit_prompt = f"""
          You are an expert code auditor specializing in TypeScript, React, Ionic, and modern web applications. 
          You are performing a {scope_descriptions.get(self.audit_scope, 'comprehensive')} audit of a government billing/invoicing application.

          ## AUDIT SCOPE: {self.audit_scope.upper()}

          ## PROJECT OVERVIEW
          **File Statistics:**
          - Total files: {codebase_context['file_stats']['total']}
          - TypeScript files: {codebase_context['file_stats']['typescript']}
          - JavaScript files: {codebase_context['file_stats']['javascript']}
          - CSS files: {codebase_context['file_stats']['css']}

          **Project Structure:**
          ```
          {codebase_context['project_structure']}
          ```

          **Dependencies:**
          ```
          {codebase_context['dependencies']}
          ```

          ## CONFIGURATION FILES
          """
                  
                  for file, content in codebase_context['key_files'].items():
                      audit_prompt += f"\n**{file}:**\n```\n{content}\n```\n"
                  
                  audit_prompt += "\n## SOURCE CODE SAMPLES\n"
                  
                  for file_path, content in sampled_files.items():
                      audit_prompt += f"\n**{file_path}:**\n```\n{content}\n```\n"
                  
                  # Define audit criteria based on scope
                  if self.audit_scope == 'all' or self.audit_scope == 'security':
                      audit_prompt += """

          ## üîê SECURITY AUDIT CRITERIA
          Please identify and analyze:
          1. **Input Validation Issues:**
             - Unvalidated user inputs
             - Missing sanitization
             - SQL injection risks
             - XSS vulnerabilities

          2. **Authentication & Authorization:**
             - Weak authentication patterns
             - Missing authorization checks
             - Insecure session handling

          3. **Data Protection:**
             - Sensitive data exposure
             - Insecure data storage
             - Missing encryption

          4. **Environment & Configuration:**
             - Hardcoded secrets
             - Insecure configurations
             - Missing environment validation
          """

                  if self.audit_scope == 'all' or self.audit_scope == 'maintainability':
                      audit_prompt += """

          ## üõ†Ô∏è MAINTAINABILITY AUDIT CRITERIA
          Please identify and analyze:
          1. **Code Complexity:**
             - Complex functions/components
             - Deep nesting levels
             - Long parameter lists
             - Unclear logic flows

          2. **Code Quality:**
             - Poor naming conventions
             - Lack of documentation
             - Inconsistent coding styles
             - Missing TypeScript types

          3. **Architecture & Structure:**
             - Circular dependencies
             - Tight coupling
             - Missing abstractions
             - Poor separation of concerns

          4. **Duplication:**
             - Duplicate code blocks
             - Similar logic patterns
             - Redundant components
          """

                  if self.audit_scope == 'all' or self.audit_scope == 'performance':
                      audit_prompt += """

          ## üöÄ PERFORMANCE AUDIT CRITERIA
          Please identify and analyze:
          1. **Rendering Performance:**
             - Unnecessary re-renders
             - Missing React.memo/useMemo
             - Large component trees
             - Inefficient state updates

          2. **Data & API:**
             - Unnecessary API calls
             - Missing caching strategies
             - Large payload sizes
             - Synchronous operations

          3. **Resource Management:**
             - Memory leaks
             - Missing cleanup in useEffect
             - Large bundle sizes
             - Unoptimized images/assets

          4. **Algorithms & Logic:**
             - Inefficient loops
             - Poor data structures
             - Redundant computations
          """

                  if self.audit_scope == 'all' or self.audit_scope == 'cleanup':
                      audit_prompt += """

          ## üßπ CLEANUP AUDIT CRITERIA
          Please identify and analyze:
          1. **Dead Code:**
             - Unused functions/variables
             - Unreachable code
             - Commented-out code blocks
             - Unused imports

          2. **Dependencies:**
             - Unused npm packages
             - Outdated dependencies
             - Security vulnerabilities in deps
             - Duplicate dependencies

          3. **Files & Assets:**
             - Unused files
             - Duplicate assets
             - Old/legacy code
             - Test files in production
          """

                  audit_prompt += f"""

          ## AUDIT INSTRUCTIONS
          Based on your analysis of the provided codebase, create a comprehensive audit report. 

          **Output Format:**

          # üîç Claude AI Code Audit Report

          **Project:** Government Billing/Invoicing Application
          **Audit Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          **Audit Scope:** {self.audit_scope.title()}
          **Files Analyzed:** [Number] files

          ## üìä Executive Summary
          [Brief overview of findings and overall code health]

          ## üîç Detailed Findings

          ### üîê Security Issues
          [Security-related findings - include severity levels: CRITICAL, HIGH, MEDIUM, LOW]

          ### üõ†Ô∏è Maintainability Issues  
          [Code quality and maintainability issues]

          ### üöÄ Performance Issues
          [Performance-related findings]

          ### üßπ Cleanup Opportunities
          [Dead code, unused dependencies, etc.]

          ## üìà Metrics & Statistics
          [Code metrics, complexity scores, etc.]

          ## ‚úÖ Positive Findings
          [Things that are done well]
          """

                  if self.include_suggestions:
                      audit_prompt += """

          ## üí° Improvement Recommendations

          ### Priority 1 (Critical/High)
          [Most important improvements]

          ### Priority 2 (Medium)
          [Important but not urgent improvements]

          ### Priority 3 (Low)
          [Nice-to-have improvements]

          ## üõ†Ô∏è Implementation Guidance
          [Specific steps to address the issues]
          """

                  audit_prompt += """

          ## üìã Action Items Checklist
          [Actionable checklist for developers]

          ---
          *Report generated by Claude AI Code Auditor*

          Please provide specific examples from the code when highlighting issues. Include file names, line numbers (when possible), and code snippets to support your findings.
          Be thorough but concise. Focus on actionable insights that will genuinely improve the codebase.
          """

                  return self.generate_with_retry(audit_prompt)

              def generate_with_retry(self, prompt, max_retries=10):
                  """Generate audit report with retry logic"""
                  print("ü§ñ Sending audit request to Claude AI...")
                  print(f"üìù Prompt length: {len(prompt):,} characters")
                  print(f"üéØ Using model: {self.model_id}")
                  print("=" * 80)
                  
                  for attempt in range(max_retries):
                      try:
                          print(f"üöÄ Attempt {attempt + 1}/{max_retries}")
                          
                          body = {
                              "anthropic_version": "bedrock-2023-05-31",
                              "max_tokens": 15000,
                              "messages": [
                                  {
                                      "role": "user",
                                      "content": prompt
                                  }
                              ]
                          }
                          
                          start_time = time.time()
                          response = self.bedrock_client.invoke_model(
                              body=json.dumps(body),
                              modelId=self.model_id,
                              accept='application/json',
                              contentType='application/json'
                          )
                          
                          response_body = json.loads(response.get('body').read())
                          audit_report = response_body['content'][0]['text']
                          
                          end_time = time.time()
                          generation_time = end_time - start_time
                          
                          print(f"‚úÖ Audit completed in {generation_time:.2f} seconds!")
                          print(f"üìä Report length: {len(audit_report):,} characters")
                          print("=" * 80)
                          
                          return audit_report
                          
                      except Exception as e:
                          error_str = str(e)
                          print(f"‚ùå Attempt {attempt + 1} failed: {error_str}")
                          
                          if attempt < max_retries - 1:
                              delay = min(2 ** attempt + random.uniform(0, 1), 60)
                              print(f"‚è≥ Waiting {delay:.2f} seconds before retry...")
                              time.sleep(delay)
                          else:
                              print("‚ùå All retry attempts exhausted")
                              return None
                  
                  return None

              def save_audit_report(self, audit_report):
                  """Save audit report to file"""
                  print("üíæ Saving audit report...")
                  
                  # Create .github/claude directory if it doesn't exist
                  os.makedirs('.github/claude', exist_ok=True)
                  
                  # Save the audit report
                  audit_file_path = '.github/claude/audit.md'
                  with open(audit_file_path, 'w', encoding='utf-8') as f:
                      f.write(audit_report)
                  
                  print(f"‚úÖ Audit report saved to {audit_file_path}")
                  return audit_file_path

              def create_branch_and_commit(self, audit_file_path):
                  """Create branch and commit audit report"""
                  try:
                      print(f"üåø Creating branch: {self.branch_name}")
                      
                      # Configure git
                      subprocess.run(['git', 'config', 'user.name', 'Claude Auditor'], check=True)
                      subprocess.run(['git', 'config', 'user.email', 'claude-auditor@github-actions.bot'], check=True)
                      
                      # Create and checkout new branch
                      subprocess.run(['git', 'checkout', '-b', self.branch_name], check=True)
                      
                      # Add the audit report
                      subprocess.run(['git', 'add', audit_file_path], check=True)
                      
                      # Create commit message
                      commit_msg = f"""üîç Claude AI Code Audit Report

          Comprehensive codebase audit performed by Claude AI

          Audit Scope: {self.audit_scope}
          Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          Report: {audit_file_path}

          This automated audit covers:
          üîê Security vulnerabilities and best practices
          üõ†Ô∏è Maintainability and code quality
          üöÄ Performance optimization opportunities  
          üßπ Dead code and cleanup recommendations
          """
                      
                      # Commit changes
                      subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                      
                      # Push branch
                      subprocess.run(['git', 'push', '-u', 'origin', self.branch_name], check=True)
                      
                      print(f"‚úÖ Successfully pushed audit report to branch: {self.branch_name}")
                      return True
                      
                  except subprocess.CalledProcessError as e:
                      print(f"‚ùå Git operation failed: {e}")
                      return False

              def create_pull_request(self, audit_file_path):
                  """Create pull request for audit report"""
                  try:
                      print("üìù Creating pull request...")
                      
                      github_client = Github(self.github_token)
                      repo = github_client.get_repo(f"{self.repo_owner}/{self.repo_name}")
                      
                      pr_title = f"üîç Claude AI Code Audit Report - {datetime.now().strftime('%Y-%m-%d')}"
                      
                      pr_body = f"""# üîç Claude AI Code Audit Report

          This pull request contains a comprehensive code audit report generated by Claude AI.

          ## üìã Audit Details
          - **Scope:** {self.audit_scope.title()}
          - **Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          - **Report Location:** `{audit_file_path}`
          - **Suggestions Included:** {'Yes' if self.include_suggestions else 'No'}

          ## üéØ Audit Coverage

          {'üîê **Security Analysis** - Vulnerability detection and security best practices' if self.audit_scope in ['all', 'security'] else ''}
          {'üõ†Ô∏è **Maintainability Review** - Code quality and structural improvements' if self.audit_scope in ['all', 'maintainability'] else ''}
          {'üöÄ **Performance Optimization** - Performance bottlenecks and optimization opportunities' if self.audit_scope in ['all', 'performance'] else ''}
          {'üßπ **Code Cleanup** - Dead code, unused dependencies, and cleanup recommendations' if self.audit_scope in ['all', 'cleanup'] else ''}

          ## üìñ How to Use This Report

          1. **Review the findings** in the audit report
          2. **Prioritize issues** based on severity levels
          3. **Create issues** for specific problems that need fixing
          4. **Implement suggestions** to improve code quality
          5. **Schedule regular audits** to maintain code health

          ## ‚ö†Ô∏è Important Notes

          - This audit was performed by AI and should be reviewed by human developers
          - Some findings may be false positives - use your judgment
          - Consider the context of your application when implementing suggestions
          - Not all issues need immediate fixing - focus on high-priority items first

          ## üîÑ Next Steps

          1. Review the complete audit report
          2. Discuss findings with your development team
          3. Create actionable tickets for priority issues
          4. Plan implementation of recommended improvements

          ---
          *Generated automatically by Claude AI Code Auditor ü§ñ*
          """
                      
                      # Try to create PR using GitHub CLI as fallback
                      try:
                          pull_request = repo.create_pull(
                              title=pr_title,
                              body=pr_body,
                              head=self.branch_name,
                              base='main'
                          )
                          
                          # Add labels
                          try:
                              pull_request.add_to_labels('claude-audit', 'code-quality', 'automated')
                          except:
                              pass  # Labels might not exist
                          
                          print(f"‚úÖ Pull request created: {pull_request.html_url}")
                          return pull_request.html_url
                      except Exception as pr_error:
                          if "not permitted" in str(pr_error) or "403" in str(pr_error):
                              print("‚ö†Ô∏è GitHub Actions cannot create PRs directly. Using GitHub CLI fallback...")
                              
                              # Try using GitHub CLI
                              try:
                                  result = subprocess.run([
                                      'gh', 'pr', 'create',
                                      '--title', pr_title,
                                      '--body', pr_body,
                                      '--head', self.branch_name,
                                      '--base', 'main'
                                  ], capture_output=True, text=True, check=True)
                                  
                                  pr_url = result.stdout.strip()
                                  print(f"‚úÖ Pull request created via GitHub CLI: {pr_url}")
                                  return pr_url
                              except subprocess.CalledProcessError as cli_error:
                                  print(f"‚ùå GitHub CLI also failed: {cli_error}")
                                  
                                  # Final fallback - create a summary file instead
                                  print("üìù Creating audit summary instead of PR...")
                                  summary_path = self.create_audit_summary(audit_file_path)
                                  print(f"‚úÖ Audit summary created: {summary_path}")
                                  print("üí° You can manually create a PR from the claude-code-audit branch")
                                  return f"Branch: {self.branch_name} (manual PR needed)"
                          else:
                              raise pr_error
                      
                  except Exception as e:
                      print(f"‚ùå Failed to create pull request: {e}")
                      # Create summary as fallback
                      summary_path = self.create_audit_summary(audit_file_path)
                      print(f"‚úÖ Audit summary created instead: {summary_path}")
                      return None

              def create_audit_summary(self, audit_file_path):
                  """Create a summary file when PR creation fails"""
                  summary_content = f"""# üîç Claude AI Code Audit Summary

          **Audit Completed:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          **Branch:** {self.branch_name}
          **Report Location:** {audit_file_path}
          **Scope:** {self.audit_scope.title()}

          ## üìã Next Steps

          1. **View the audit report:** `{audit_file_path}`
          2. **Create a Pull Request manually:**
             - Go to your repository on GitHub
             - Switch to the `{self.branch_name}` branch
             - Click "Create Pull Request"
          3. **Review the findings** and implement improvements

          ## üîó Quick Links

          - **Branch:** [{self.branch_name}](https://github.com/{self.repo_owner}/{self.repo_name}/tree/{self.branch_name})
          - **Report:** [{audit_file_path}](https://github.com/{self.repo_owner}/{self.repo_name}/blob/{self.branch_name}/{audit_file_path})

          ---
          *Generated by Claude AI Code Auditor*
          """
                  
                  summary_path = 'AUDIT_SUMMARY.md'
                  with open(summary_path, 'w', encoding='utf-8') as f:
                      f.write(summary_content)
                  
                  # Add and commit the summary
                  try:
                      subprocess.run(['git', 'add', summary_path], check=True)
                      subprocess.run(['git', 'commit', '-m', 'Add audit summary'], check=True)
                      subprocess.run(['git', 'push'], check=True)
                  except:
                      pass
                  
                  return summary_path

              def run_audit(self):
                  """Main audit execution method"""
                  print("üîç Starting Claude AI Code Audit...")
                  print(f"üìã Audit scope: {self.audit_scope}")
                  print(f"üí° Include suggestions: {self.include_suggestions}")
                  print("=" * 80)
                  
                  # Step 1: Analyze codebase structure
                  codebase_context = self.analyze_codebase_structure()
                  
                  # Step 2: Sample source files for detailed analysis
                  sampled_files = self.sample_source_files(codebase_context['source_files'])
                  
                  # Step 3: Perform audit with Claude
                  audit_report = self.perform_audit_with_claude(codebase_context, sampled_files)
                  
                  if not audit_report:
                      print("‚ùå Failed to generate audit report")
                      return False
                  
                  # Step 4: Save audit report
                  audit_file_path = self.save_audit_report(audit_report)
                  
                  # Step 5: Create branch and commit
                  if self.create_branch_and_commit(audit_file_path):
                      # Step 6: Create pull request
                      pr_url = self.create_pull_request(audit_file_path)
                      
                      if pr_url:
                          print("=" * 80)
                          print("üéâ Code audit completed successfully!")
                          print(f"üìÑ Report: {audit_file_path}")
                          print(f"üîó Pull Request: {pr_url}")
                          print("=" * 80)
                          return True
                      else:
                          print("=" * 80)
                          print("üéâ Code audit completed successfully!")
                          print(f"üìÑ Report: {audit_file_path}")
                          print(f"üåø Branch: {self.branch_name}")
                          print("üí° Create a pull request manually from the GitHub interface")
                          print("=" * 80)
                          return True  # Still consider this successful
                  else:
                      print("‚ùå Failed to create branch and commit audit report")
                      return False

          if __name__ == "__main__":
              auditor = ClaudeCodeAuditor()
              success = auditor.run_audit()
              exit(0 if success else 1)
          EOF

          python claude_auditor.py

      - name: Summary
        if: always()
        run: |
          echo "üìã Claude AI Code Audit Workflow Summary"
          echo "======================================="
          echo "Audit Scope: ${{ github.event.inputs.audit_scope }}"
          echo "Include Suggestions: ${{ github.event.inputs.include_suggestions }}"
          echo "Branch: claude-code-audit"
          echo "Report Location: .github/claude/audit.md"
          echo ""
          echo "üîç The audit analyzed your codebase for:"
          echo "  üîê Security vulnerabilities and unsafe patterns"
          echo "  üõ†Ô∏è Maintainability and code quality issues"
          echo "  üöÄ Performance optimization opportunities"
          echo "  üßπ Dead code and cleanup recommendations"
          echo ""
          echo "üìñ Check the pull request for detailed findings and recommendations!"
